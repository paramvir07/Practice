import threading
import time
import random

# Number of philosophers
NUM_PHILOSOPHERS = 5

# Create a lock for each fork
forks = [threading.Lock() for _ in range(NUM_PHILOSOPHERS)]

def philosopher(philosopher_number):
    while True:
        # Thinking
        print(f"Philosopher {philosopher_number} is thinking.")
        time.sleep(random.uniform(1, 3))

        # Hungry and trying to pick up forks
        print(f"Philosopher {philosopher_number} is hungry.")

        left_fork = forks[philosopher_number]
        right_fork = forks[(philosopher_number + 1) % NUM_PHILOSOPHERS]

        # To avoid deadlock, pick up the lower numbered fork first
        first_fork, second_fork = (left_fork, right_fork) if philosopher_number % 2 == 0 else (right_fork, left_fork)

        with first_fork:
            with second_fork:
                # Eating
                print(f"Philosopher {philosopher_number} is eating.")
                time.sleep(random.uniform(1, 3))

        # Finished eating and will think again
        print(f"Philosopher {philosopher_number} finished eating and is thinking again.")

# Create and start a thread for each philosopher
threads = []
for i in range(NUM_PHILOSOPHERS):
    t = threading.Thread(target=philosopher, args=(i,))
    t.start()
    threads.append(t)

# Join all threads
for t in threads:
    t.join()
